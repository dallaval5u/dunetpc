#include "services_dune.fcl"
#include "RegCNNMapper.fcl"
#include "RegCNNEvaluator.fcl"
#include "tools_dune.fcl"

process_name: RegCNNEvaluator

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "regcnn_evaluator_r%r_s%s_hist.root"
                  closeFileFast: false }
  @table::dunefd_reco_services
  #@table::standard_services
  TimeTracker:       {}
  RandomNumberGenerator: {}
  MemoryTracker:         { } # default is one
  message:      @local::dune_message_services_prod
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_simulation_services

}

#services.BackTrackerService: @local::standard_backtrackerservice

# Input source is a ROOT file 
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create

}

outputs:
{
  out1:
  {
      module_type: RootOutput
      fileName:    "regcnnevaluator_r%r_s%s.root" 
      fastCloning: false
      dataTier: "full-reconstructed"
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  # Declare the modules
  producers:
  { 
    regcnnnumumap:     @local::standard_regcnnnumumapper
    regcnnnumueval:    @local::standard_regcnnnumuevaluator
  }

  # Build the paths
  map: [ regcnnnumumap, regcnnnumueval ]
  
  out: [out1]
}

physics.producers.regcnnnumueval.RegCNNNumuHandler.TFNetHandlerContained.LibPath:    "MRB_INSTALL"
physics.producers.regcnnnumueval.RegCNNNumuHandler.TFNetHandlerContained.TFProtoBuf: "duneRegCNNNetwork/julian_numucc_eng_trackCont_01_trueDetin_1_20200823.pb"
physics.producers.regcnnnumueval.RegCNNNumuHandler.TFNetHandlerExiting.LibPath:      "MRB_INSTALL"
physics.producers.regcnnnumueval.RegCNNNumuHandler.TFNetHandlerExiting.TFProtoBuf:   "duneRegCNNNetwork/julian_numucc_eng_trackCont_01_trueDetin_1_20200823.pb"

########################################################################
