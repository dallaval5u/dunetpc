BEGIN_PROLOG

IcebergDataInterface_tool: 
  {
  tool_type: "IcebergDataInterface"

  APA1InputLabels: [ "daq:TPC001", "daq:ContainerTPC001", "daq:FELIX001", "daq:ContainerFELIX001",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX" ]
  APA2InputLabels: [ "daq:TPC002", "daq:ContainerTPC002", "daq:FELIX002", "daq:ContainerFELIX002",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX" ]
  APA3InputLabels: [ "daq:TPC003", "daq:ContainerTPC003", "daq:FELIX003", "daq:ContainerFELIX003",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX" ]
  APA4InputLabels: [ "daq:TPC004", "daq:ContainerTPC004", "daq:FELIX004", "daq:ContainerFELIX004",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX" ]
  APA5InputLabels: [ "daq:TPC005", "daq:ContainerTPC005", "daq:FELIX005", "daq:ContainerFELIX005",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX" ]
  APA6InputLabels: [ "daq:TPC006", "daq:ContainerTPC006", "daq:FELIX006", "daq:ContainerFELIX006",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX" ]
  APA7InputLabels: [ "daq:TPC007", "daq:ContainerTPC007", "daq:FELIX007", "daq:ContainerFELIX007",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX",
                     "daq:TPC000", "daq:ContainerTPC000", "daq:FELIX000", "daq:ContainerFELIX000" ]
  APA8InputLabels: [ "daq:TPC008", "daq:ContainerTPC008", "daq:FELIX008", "daq:ContainerFELIX008",  "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX",
                     "daq:TPC000", "daq:ContainerTPC000", "daq:FELIX000", "daq:ContainerFELIX000" ]

  MISCAPAInputLabels: [ "daq:TPC", "daq:ContainerTPC", "daq:FELIX", "daq:ContainerFELIX" ]  # use for example for coldbox-test data

  DefaultCrateIfUnexpected:  1     #  Use for coldbox data -- unexpected means not in the range 1-6.

  MinOfflineChannel:        -1     #  Use to limit range of channels.  <0: no limit
  MaxOfflineChannel:        -1     #  Use to limit range of channels.  <0: no limit.  < MinOfflineChannel: no limit

  RCEDropSmallFrags: true
  RCESmallFragSize: 500
  RCEDropFragsWithBadSF: true    # skip fragments with invalid  slot and fiber numbers
  RCEDropFragsWithBadC:  false    # skip fragments with invalid crate numbers
  RCEHexDump: false
  RCESaveFragsToFiles: false
  RCECheckBufferSize: true
  RCEBufferSizeCheckLimit: 10000000

  FELIXDropFragsWithBadSF: true
  FELIXDropFragsWithBadC: true
  FELIXHexDump: false
  FELIXDropSmallFrags: true
  FELIXSmallFragSize: 10000
  FELIXCheckBufferSize: true
  FELIXBufferSizeCheckLimit: 10000000

# enforcement flags.  If these are set to true and the data completeness 
# conditions are not met, then an emtpy collection of raw::RawDigits is 
# put in the event

# requires that we don't see the same channel twice in in an event

  EnforceNoDuplicateChannels: true

# requires that all channels have the same number of ticks (on each event separately)

  EnforceSameTickCount: false

# requires that all channels have the specified number of ticks

  EnforceFullTickCount: false
  FullTickCount: 2000

# requires that no errors are reported by the unpacker (checksum or capture errors)

  EnforceErrorFree: false
  }

IcebergDataInterface_tool_FELIXBufferMarch2021:
{
  tool_type: "IcebergDataInterfaceFELIXBufferMarch2021"
  InputFiles: [ "slr1-0-data.bin", 
                "slr1-64-data.bin", 
                "slr1-128-data.bin", 
                "slr1-256-data.bin",
                "slr1-320-data.bin" ]
  NSamples: 2000
  CompressHuffman: false

}

IcebergDataInterface_tool_frame14: @local::IcebergDataInterface_tool
IcebergDataInterface_tool_frame14.APA1InputLabels: [ "daq:FRAME14" ]
IcebergDataInterface_tool_frame14.MISCAPAInputLabels: [ "daq:FRAME14" ]

END_PROLOG
