#include "services_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "opticaldetectormodules_dune.fcl"

#include "tools_dune.fcl"

process_name: detsim

services: @local::dunefd_simulation_services_legacy
services.TFileService: { fileName: "detsim_hist.root" }
services.TimeTracker:       {}
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::random_NuRandomService  # seedservice.fcl

#source is now a root file
source: {
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
 producers: {
   addnoise: {
         module_type: "NoiseAdder"
         SimChannelLabel: "noiseadd"
      }

   rns:            { module_type: "RandomNumberSaver" }
 }
 simulate: [ rns, addnoise ]
 stream1:  [ out1 ]
 trigger_paths: [simulate] 
 end_paths:     [stream1]  
}

outputs: {
 out1: {
   module_type: RootOutput
   fileName:    "%ifb_detsim.root"
   dataTier:    "detector-simulated"
   compressionLevel: 1
 }
}
